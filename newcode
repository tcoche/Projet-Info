%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PARTIE 1 : extend notes et extend chords

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
   % Translate a note to the extended notation.
   % (On n'a pas d'impact sur la durée ou l'instrument)
   
   fun {NoteToExtended Note}
      case Note
      of Name#Octave then
         note(name:Name octave:Octave sharp:true duration:1.0 instrument:none)
      [] Atom then
         case {AtomToString Atom}
         of [_] then
            note(name:Atom octave:4 sharp:false duration:1.0 instrument:none)
         [] [N O] then
            note(name:{StringToAtom [N]}
                 octave:{StringToInt [O]}
                 sharp:false
                 duration:1.0
                 instrument: none)
	       else silence(duration : 0.0)
       	 end
      end
   end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Extend un chord
   
   fun {ChordToExtended Chord}
      case Chord
      of nil then nil 
      [] H|T then {NoteToExtended H}|{ChordToExtended T}
      end
   end
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PARTIE 2 : check quel type est <partition item>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Sketch de la forme de notre fonction finale 
 '''  
   fun {FlatPartition Partition}
     case Partition of H|T 
     then 
       if {IsNote H}
       then return H extended
     
       if {IsExtendedNote H}
       then 
           return that same already extended note
         
       elseif {IsExtendedChord H}
       then return that same extended chord
     
       elseif it is a list
       then it is a CHORD
     
       else 
        the only thing left : transformations
     
    []nil then nil
   
   end
  ''' 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
     
   fun{IsExtendedNote PartItem}
     
     case PartItem of note(name:V octave:W sharp:X duration:Y instrument:Z)
     then true
     []silence(duration:X)
     then true
     else false
     end
   end
     
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
     
   fun{IsExtendedChord PartItem}
   
     case PartItem of H|T then                       %check si c'est une liste
     {IsExtendedNote H}                              %check si le 1er element = extended note ou pas
     else false                                      %si c'est pas une liste
     end
   end
     
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%     

   fun{IsNote PartItem}
   
     case PartItem of Name#Octave
     then true
     []Atom 
     then true
     else false
     end
   end  
   
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
   
   fun{IsTransformation PartItem}
     
     case PartItem of duration(seconds:X Y)
     then true
     []stretch(factor:X Y)
     then true
     []drone(note:X Y)
     then true
     []transpose(semitones:X Y)
     then true
     else false
     end
   end
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
   
% PARTIE 3 : sketch presque terminé
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
   
   fun {FlatPartition Partition}
   
     case Partition of H|T 
     then
       if {IsNote H}
       then {NoteToExtended H}|{FlatPartition T}
       
       elseif {IsList H}
       then
         if{IsExtendedChord H}
	 then H|{FlatPartition T}
	 else {ChordToExtended H}|{FlatPartition T}
	 end
       
       elseif {IsExtendedNote H}
       then H|{FlatPartition T}
       
       else %%it is transformation%%
       
       end
     
     []nil then nil
   
   end     


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PARTIE 4 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% La partition doit etre FLAT

   fun{Duration FlatPart}
      
      local fun{Duration1 FlatPart Acc}
      
        case FlatPart of H|T 
        then
          case H of A|B 
  	  then {Duration1 T (Acc + A.duration)}
	  else {Duration1 T (Acc + H.duration)}
	  end
	[]nil then Acc  
        end
      end
      in
      
      {Duration1 FlatPart 0.0}
      
      end
    end
  end
      
 
 
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


   fun{DurationChange NewTime Part}
      
     local FlatPart in                                   % Toutes les transformations doivent renvoyer une <flat partition>
     FlatPart = {FlatPartition Part}      
   
     local Time in
     Time = {Duration FlatPart}
     
     local fun{DurationChange1 NewTime Time FlatPart}
     
     case FlatPart of H|T
     then 
       case H of note(name:N octave:O sharp:S duration:D instrument:I)
       then note(name:N octave:O sharp:S duration:((NewTime div Time)*D) instrument:I)|{DurationChange1 NewTime Time T}
       
       []A|B then
         case A of note(name:N octave:O sharp:S duration:D instrument:I)
         then note(name:N octave:O sharp:S duration:((NewTime div Time)*D) instrument:I)|{DurationChange1 NewTime Time B}
       
         []nil then nil|{DurationChange1 NewTime Time T}
       
         end
	 
       end
     
     end
   end  
   in  
      {DurationChange1 NewTime Time FlatPart}
   end
 end
 end
 end
 
     
     


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {PartitionToTimedList Partition}
      % TODO
      nil
   end
