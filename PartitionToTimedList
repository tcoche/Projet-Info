%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PARTIE 1

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

declare
fun {NoteToExtended Note}
      case Note
      of Name#Octave then
         note(name:Name octave:Octave sharp:true duration:1.0 instrument:none)
      [] Atom then
         case {AtomToString Atom}
         of [_] then
            note(name:Atom octave:4 sharp:false duration:1.0 instrument:none)
         [] [N O] then
            note(name:{StringToAtom [N]}
                 octave:{StringToInt [O]}
                 sharp:false
                 duration:1.0
                 instrument: none)
	       else silence(duration : 0.0)
       	 end
      end
end

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Extend un chord

declare
fun {ChordToExtended Chord}
   case Chord
   of nil then nil
   [] H|T then {NoteToExtended H}|{ChordToExtended T}
   end
end
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PARTIE 2 : check quel type est <partition item>

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
declare
fun{IsExtendedNote PartItem}
   case PartItem of note(name:V octave:W sharp:X duration:Y instrument:Z)
   then true
   []silence(duration:X)
   then true
   else false
   end
end
     
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
declare
fun{IsExtendedChord PartItem}

   case PartItem of H|T then                       %check si c'est une liste
      {IsExtendedNote H}                           %check si le 1er element = extended note ou pas
   else false                                      %si c'est pas une liste
   end
end
     
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
declare
fun{IsNote PartItem}

   case PartItem of Name#Octave
   then true
   []Atom 
   then true
   else false
   end
end  
   
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%  
declare
fun{IsTransformation PartItem}

   case PartItem of duration(seconds:X Y)
   then true
   []stretch(factor:X Y)
   then true
   []drone(note:X Y)
   then true
   []transpose(semitones:X Y)
   then true
   else false
   end
end
     
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% PARTIE 3 

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% La partition doit etre FLAT

declare
fun{Duration FlatPart}
   local fun{Duration1 FlatPart Acc}
	    case FlatPart of H|T
	    then
	       case H of A|B
	       then {Duration1 T (Acc + A.duration)}
	       else {Duration1 T (Acc + H.duration)}
	       end
	    []nil then Acc
	    else false
	    end
	 end
   in
      {Duration1 FlatPart 0.0}
   end
end
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%    
declare
fun{DurationChangeChord Chord NewTime Time}

   case Chord of H|T
   then
      case H of note(name:N octave:O sharp:S duration:D instrument:I)
      then note(name:N octave:O sharp:S duration:((NewTime div Time)*D) instrument:I)|{DurationChangeChord T NewTime Time}
      end
   else nil
   end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
declare
fun{DurationChange NewTime Part}
   local FlatPart in                        % Toutes les transformations doivent renvoyer une <flat partition>
      FlatPart = {FlatPartition Part}      

      local Time in
	 Time = {Duration FlatPart}

	 local fun{DurationChange1 NewTime Time FlatPart}
		  case FlatPart of H|T
		  then 
		     case H of note(name:N octave:O sharp:S duration:D instrument:I)
		     then note(name:N octave:O sharp:S duration:((NewTime div Time)*D) instrument:I)|{DurationChange1 NewTime Time T}
		     else {DurationChangeChord H NewTime Time}|{DurationChange1 NewTime Time T}
		     end

		  else nil
		  end
	       end
	 in
	    {DurationChange1 NewTime Time FlatPart}
	 end
      end
   end
end


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
   
% PARTIE 4 : sketch presque termin√©
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%   
declare
fun {FlatPartition Partition}
   case Partition of H|T 
   then
      if {IsNote H}
      then {NoteToExtended H}|{FlatPartition T}

      elseif {IsList H}
      then
	 if{IsExtendedChord H}
	 then H|{FlatPartition T}
	 else {ChordToExtended H}|{FlatPartition T}
	 end

      elseif {IsExtendedNote H}
      then H|{FlatPartition T}

      else
	 case H of duration(seconds:X Part)
	 then {DurationChange X Part}|{FlatPartition T}
	 else false
	 end
      end
   []nil then nil
   else false
   end
end

     
   
   
   
   
   
   
   
   
   %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

   fun {PartitionToTimedList Partition}
      % TODO
      nil
   end
